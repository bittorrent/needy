import os
import distutils
import textwrap
import sys

from ..platforms.xcode import XcodePlatform
from .. import project


class BoostBuildProject(project.Project):

    @staticmethod
    def identifier():
        return 'boostbuild'

    @staticmethod
    def is_valid_project(definition, needy):
        for name in BoostBuildProject.__valid_jamroot_filenames():
            if os.path.isfile(name):
                return True, 'Jamroot file {} found'.format(name)
        return False, 'no Jamroot file matching {} found'.format(BoostBuildProject.__valid_jamroot_filenames())

    @staticmethod
    def __valid_jamroot_filenames():
        return ['Jamroot', 'Jamroot.jam']

    @staticmethod
    def missing_prerequisites(definition, needy):
        return ['b2'] if not os.path.isfile('bootstrap.sh') and distutils.spawn.find_executable('b2') is None else []

    @staticmethod
    def configuration_keys():
        return project.Project.configuration_keys() | {'b2-args', 'bootstrap-args'}

    def get_build_concurrency_args(self):
        concurrency = self.build_concurrency()

        if concurrency > 1:
            return ['-j', str(concurrency)]
        elif concurrency == 0:
            return ['-j']
        return []

    def configure(self, build_directory):
        bootstrap_args = self.evaluate(self.configuration('bootstrap-args'))
        if not os.path.isfile('bootstrap.sh'):
            if len(bootstrap_args) > 0:
                raise RuntimeError('bootstrap-args was given, but no bootstrap script is present')
            return

        self.command(['./bootstrap.sh'] + bootstrap_args, use_target_overrides=False)

    def build(self, output_directory):
        b2 = './b2' if os.path.isfile('b2') else 'b2'
        b2_args = self.evaluate(self.configuration('b2-args'))
        b2_args.extend(self.get_build_concurrency_args())

        b2_args.append('architecture={}'.format('arm' if 'arm' in self.target().architecture else 'x86'))
        b2_args.append('address-model={}'.format('64' if '64' in self.target().architecture else '32'))

        toolset = 'gcc'
        if sys.platform == 'darwin' and isinstance(self.target().platform, XcodePlatform):
            toolset = 'darwin'
        elif distutils.spawn.find_executable('clang') is not None:
            toolset = 'clang'
        b2_args.append('toolset={}-needy'.format(toolset))

        project_config = ''
        if os.path.exists('project-config.jam'):
            with open('project-config.jam', 'r') as f:
                project_config = f.read()

        new_project_config = textwrap.dedent("""\
            ### GENERATED BY NEEDY ###
            import feature ;
            import os ;
        """)

        if toolset == 'darwin':
            new_project_config += "feature.extend instruction-set : {} ;\n".format(self.target().architecture)
            b2_args.append('instruction-set={}'.format(self.target().architecture))

        if self.target().platform.identifier() in ['ios', 'iossimulator']:
            b2_args.append('target-os=iphone')
        elif self.target().platform.identifier() in ['tvos', 'tvossimulator']:
            b2_args.append('target-os=appletv')
            new_project_config += "feature.extend target-os : appletv ;\n"
        elif self.target().platform.identifier() == 'android':
            b2_args.append('target-os=android')

        new_project_config += textwrap.dedent("""\
            using {toolset} : needy : [ os.environ CC ] ;
            ### NO LONGER GENERATED BY NEEDY ###
        """).format(
            toolset=toolset
        )

        skip_lines = False
        for line in project_config.splitlines(True):
            if 'GENERATED BY NEEDY' in line:
                skip_lines = not skip_lines
            if not skip_lines:
                new_project_config += line

        with open('project-config.jam', 'w') as f:
            f.write(new_project_config)

        if 'CFLAGS' in os.environ:
            b2_args.append('cflags={}'.format(os.environ['CFLAGS']))
        if 'CXXFLAGS' in os.environ:
            b2_args.append('cxxflags={}'.format(os.environ['CXXFLAGS']))
        if 'LDFLAGS' in os.environ:
            b2_args.append('linkflags={}'.format(os.environ['LDFLAGS']))

        self.command([b2, 'install', '--prefix={}'.format(output_directory)] + b2_args)
